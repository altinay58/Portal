@model Portal.Models.FirmaKisi
@{
    ViewBag.Title = "FirmaKisiEkle";
}
@using (@Html.BeginForm("FirmaKisiEkle", "Firmalar", FormMethod.Post,
                                                     new { id = "ekleForm" }))
{

    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.Id)
        <div class="alert alert-danger display-hide">
            <button class="close" data-close="alert"></button> Bazı alanları hatalı girdiniz! Lütfen formu kontrol ediniz.
        </div>
        <div class="alert alert-success display-hide">
            <button class="close" data-close="alert"></button> Form validasyonu başarılı!
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Ad
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Ad, new { @class = "form-control" })             
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Soyad
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Soyad, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Firma Adı
            </label>
            <div class="col-md-4">
                @if (Model.Firma != null)
                {
                    <input id="firmaAdi" type="text" class="form-control" name="firmaAdi" value="@Model.Firma.FirmaAdi" />
                    <input id="firmaId" type="hidden" class="form-control" name="FirmaId" value="@Model.FirmaId" />
                }
                else
                {
                    <input id="firmaAdi" type="text" class="form-control" name="firmaAdi" value="" />
                    <input id="firmaId" type="hidden" class="form-control" name="FirmaId" value="" />
                }


            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Departman
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Departman, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Telefon
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Tel, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">
                Email
            </label>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-4">
                <button type="submit" class="btn green">Kaydet</button>
            </div>
        </div>
    </div>
}


@section css{
    <link href="/Content/assets/global/plugins/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
    <link href="/Content/assets/global/plugins/select2/css/select2-bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="/Content/assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" type="text/css" />


    <style>
        .datepicker.dropdown-menu {
            z-index: 9999 !important;
        }

        .autocomplete-suggestions {
            border: 1px solid #999;
            background: #FFF;
            overflow: auto;
        }

        .autocomplete-suggestion {
            padding: 2px 5px;
            white-space: nowrap;
            overflow: hidden;
        }

        .autocomplete-selected {
            background: #F0F0F0;
        }

        .autocomplete-suggestions strong {
            font-weight: normal;
            color: #3399FF;
        }

        .autocomplete-group {
            padding: 2px 5px;
        }

            .autocomplete-group strong {
                display: block;
                border-bottom: 1px solid #000;
            }
    </style>

}
@section scripts{
    <script src="/js/jquery.autocomplete.js"></script>
    <script src="/Content/assets/global/plugins/jquery-validation/js/jquery.validate.min.js"></script>
    <script src="/Content/assets/global/plugins/moment.min.js" type="text/javascript"></script>

    <script src="/Content/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript"></script>

    <script>

        $(function () {
            validateForm();
            $("#firmaAdi").autocomplete({
                minChars: 2,
                transformResult: function (response) {
                    return {
                        suggestions: $.map(response, function (dataItem) {
                            return { value: dataItem["label"], data: dataItem["value"] };
                        })
                    };
                },
                onSearchStart: function (query) {

                },
                paramName: 'firmaAdi',
                serviceUrl: '/Isler/FirmalariGetir',
                onSelect: function (suggestion) {
                    console.log(suggestion.data);
                    $("#firmaId").val(suggestion.data);
                },
                dataType: "json",
                noCache: true,
                tabDisabled: true
            })
        })
        function validateForm() {
            //**validation
            var form1 = $('#ekleForm');
            var error1 = $('.alert-danger', form1);
            var success1 = $('.alert-success', form1);

            form1.validate({
                errorElement: 'span', //default input error message container
                errorClass: 'help-block help-block-error', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",  // validate all fields including form hidden input
                messages: {
                    Ad: "Zorunlu alan.",
                    Soyad: "Zorunlu alan.",
                    firmaAdi: "Zorunlu alan.",
                    Departman: "Zorunlu alan.",
                    Tel:"Zorunlu Alan.",
                    Email:"Email geçerli değil."
                },
                rules: {
                    Ad: {
                        minlength: 2,
                        required: true
                    },
                    Soyad: {
                        minlength: 2,
                        required: true
                    },
                    firmaAdi: {
                        minlength: 2,
                        required: true
                    },
                    Departman: {
                        minlength: 2,
                        required: true
                    },
                    Tel: {
                        minlength: 2,
                        required: true
                    },
                    Email: {                      
                        email: true
                    }

                },

                invalidHandler: function (event, validator) { //display error alert on form submit
                    success1.hide();
                    error1.show();
                    App.scrollTo(error1, -200);
                },

                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight
                    $(element)
                        .closest('.form-group').removeClass('has-error'); // set error class to the control group
                },

                success: function (label) {
                    label
                        .closest('.form-group').removeClass('has-error'); // set success class to the control group
                },

                submitHandler: function (form) {
                    //success1.show();
                    //error1.hide();
                    $('#ekleForm')[0].submit();
                }
            });




            //**end validation
        }
    </script>

}






